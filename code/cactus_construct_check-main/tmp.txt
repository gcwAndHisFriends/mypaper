#include<fstream>
#include<vector>
#include<map>
#include<iostream>
#define max(a,b) a>b?a:b;
using namespace std;
vector<int>g[100010];
vector<int>siz(100010);
int ans1=1,ans2=1;
int akk_n=0;
void dfs(int u,int fa){
    if(akk_n==500){
        cout<<u<<" "<<fa<<endl;
    }
    siz[u]=1;
    int cnt1=0;
    for(auto i:g[u]){
        if(i==fa)continue;
        dfs(i,u);
        siz[u]+=siz[i];
        if(siz[i]==1)cnt1++;
    }
    int len=g[u].size()-1;
    if(cnt1){
        ans1+=max(0,len-cnt1-1);
        ans2+=max(0,len-cnt1);
    }else{
        ans1+=max(0,len-1);
        ans2+=max(0,len-1);
    }

}
map<int,double>mp1,mp2;

void get_siz(int n,int id){
    string s="./data/"+to_string(n)+"/"+to_string(id)+".txt";
    ifstream ifs(s,ios::in);
    ans1=1,ans2=1;
    for(int i=1;i<=n;i++){
        if(!g[i].empty())g[i].clear();
        siz[i]=0;
    }
    int u,v;
    while(ifs>>u>>v){
        g[u].push_back(v);
        g[v].push_back(u);
    }
    ifs.close();
    dfs(1,0);
    mp1[n]+=ans1;
    mp2[n]+=ans2;
}

int main(){

    vector<int>ranges({100,500,1000,5000,10000,50000,100000});

    for(auto i:ranges){
        for(int j=1;j<=100;j++){
            akk_n=i;
            get_siz(i,j);
            get_siz(i,j);
        }
    }
    for(auto i:mp1){
        mp1[i.first]=mp1[i.first]/100;
    }
    for(auto i:mp1){
        mp2[i.first]=mp2[i.first]/100;
    }
    ofstream ofs("res.txt",ios::out);
    ofs<<"algorithm1:"<<"\n";
    for(auto i:mp1){
        ofs<<i.first<<" "<<i.second<<"\n";
    }
    ofs<<"algorithm2:"<<"\n";
    for(auto i:mp2){
        ofs<<i.first<<" "<<i.second<<"\n";
    }


}


#include<iostream>
#include<vector>
#include<algorithm>
#include<map>
#include<cmath>
#include<unordered_map>
#include<queue>
#include<stack>
#include<random>
#include<chrono>
#include<fstream>
using namespace std;
mt19937 rnd(chrono::system_clock::now().time_since_epoch().count());
int randed_int(int a, int b) {
	return rnd()%(b-a+1)+a;
}

struct node_val_int{
	int u,v,w;//出发点 结束点 边权
};

bool Suitable_for_random(int m,int n){//判断是否适合用随机构造法
	return log(n+1)<1+log((n-m)+1);
}

//构造数列
vector<int>
get_array(int m, int l, int r, bool unique) {
	vector<int>array;
	int n=r-l+1;
	if (unique) {
		if (r - l + 1 < m)
			return {};//不可能构造
		if (Suitable_for_random(m,n)) {//密度较低,可以使用随机性算法
			unordered_map<int, int>mp;
			for (int i = 1; i <= m; i++) {
				int u;
                do{
                    u = randed_int(l, r);
                }while(mp[u]);
				mp[u] = 1;
				array.push_back(u);
			}
			return array;
		}
		else { //不适合使用随机性算法进行构造
			for (int i = l; i <= r; i++) {
				array.push_back(i);
			}
			random_shuffle(array.begin(), array.end());
			array.erase(array.begin() + m, array.end());//把m之后的全删
			return array;
		}
	}else{
		for (int i = 1; i <= m; i++) {
			array.push_back(randed_int(l, r));
		}
		return array;
	}
}

//构造树
vector<node_val_int>
get_tree(int n, int l, int r, bool unique) {
    if (unique && l + n > r)
        return {};
    vector<node_val_int>g_line;
    vector<int>tree_val = get_array(n - 1, l, r, unique);
    for (int i = 2; i <= n; i++) {
        int fa = randed_int(1, i - 1);
        g_line.push_back({fa, i, tree_val[i - 2]});
    }
    return g_line;
}
void construct(int n,int id){
	auto it=get_tree(n,1,1e9,0);
	string url="./data/"+ to_string(n)+"/"+ to_string(id)+".txt";
	ofstream ofs;
	ofs.open(url,ios::out);
	if(!ofs){
		cout<<"no"<<endl;
	}
	for(auto &i:it){
		ofs<<i.u<<" "<<i.v<<'\n';
	}
	ofs.close();

}

signed main(){
    vector<int>ranges({100,500,1000,5000,10000,50000,100000});
	for(auto i:ranges){
        cout<<i<<endl;
		for(int j=1;j<=100;j++){
			construct(i,j);
		}
	}


}


